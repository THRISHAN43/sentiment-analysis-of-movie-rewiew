# -*- coding: utf-8 -*-
"""sentiment analysis of movie rewiew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ueq6Vvwo2-tO3LEp6tyi0suBwFBhGJkV
"""

import pandas as pd
import numpy as np
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix

# Download NLTK data (includes 'punkt' for sentence tokenization)
nltk.download('punkt')
nltk.download('stopwords')

# Sample data (replace with your own data)
data = {'review': ['This movie was amazing!', 'I really disliked this movie.', 'Not a good movie at all.', 'An excellent film.'],
        'sentiment': [1, 0, 0, 1]}
df = pd.DataFrame(data)

# Preprocess text data
def preprocess(text):
    # Tokenize
    tokens = word_tokenize(text.lower())
    # Remove stop words
    stop_words = set(stopwords.words('english'))
    filtered_tokens = [word for word in tokens if word not in stop_words]
    return ' '.join(filtered_tokens)

df['processed_review'] = df['review'].apply(preprocess)
# Create TF-IDF features
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['processed_review'])
y = df['sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Create and train Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Print confusion matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))